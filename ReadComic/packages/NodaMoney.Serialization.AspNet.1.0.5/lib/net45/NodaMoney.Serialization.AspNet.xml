<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NodaMoney.Serialization.AspNet</name>
    </assembly>
    <members>
        <member name="T:NodaMoney.Serialization.AspNet.MoneyJavaScriptConverter">
            <summary>Provides a custom Money converter for the JavaScriptSerializer in ASP.NET.</summary>
            <code>
            // create a new serializer and tell it about the NodaMoney converter.
            serializer = new JavaScriptSerializer();
            serializer.RegisterConverters(new JavaScriptConverter[] { new MoneyJavaScriptConverter() });
            </code>
        </member>
        <member name="P:NodaMoney.Serialization.AspNet.MoneyJavaScriptConverter.SupportedTypes">
            <summary>When overridden in a derived class, gets a collection of the supported types.</summary>
        </member>
        <member name="M:NodaMoney.Serialization.AspNet.MoneyJavaScriptConverter.Deserialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Type,System.Web.Script.Serialization.JavaScriptSerializer)">
            <summary>When overridden in a derived class, converts the provided dictionary into an object of the specified type.</summary>
            <param name="dictionary">An <see cref="T:System.Collections.Generic.IDictionary`2" /> instance of property data stored as name/value pairs.</param>
            <param name="type">The type of the resulting object.</param>
            <param name="serializer">The <see cref="T:System.Web.Script.Serialization.JavaScriptSerializer" /> instance.</param>
            <returns>The deserialized object.</returns>
            <exception cref="T:System.ArgumentNullException">dictionary should not be null</exception>
            <exception cref="T:System.ArgumentException">object should be of type Money to deserialize!;type</exception>
        </member>
        <member name="M:NodaMoney.Serialization.AspNet.MoneyJavaScriptConverter.Serialize(System.Object,System.Web.Script.Serialization.JavaScriptSerializer)">
            <summary>When overridden in a derived class, builds a dictionary of name/value pairs.</summary>
            <param name="obj">The object to serialize.</param>
            <param name="serializer">The object that is responsible for the serialization.</param>
            <returns>An object that contains key/value pairs that represent the objectâ€™s data.</returns>
        </member>
    </members>
</doc>
